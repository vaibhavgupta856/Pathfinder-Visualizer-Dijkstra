{"ast":null,"code":"// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid,startNode,finishNode){const visitedNodesInOrder=[];startNode.distance=0;const unvisitedNodes=getAllNodes(grid);while(!!unvisitedNodes.length){sortNodesByDistance(unvisitedNodes);const closestNode=unvisitedNodes.shift();// If we encounter a wall, we skip it.\nif(closestNode.isWall)continue;// If the closest node is at a distance of infinity,\n// we must be trapped and should therefore stop.\nif(closestNode.distance===Infinity)return visitedNodesInOrder;closestNode.isVisited=true;visitedNodesInOrder.push(closestNode);if(closestNode===finishNode)return visitedNodesInOrder;updateUnvisitedNeighbors(closestNode,grid);}}function sortNodesByDistance(unvisitedNodes){unvisitedNodes.sort((nodeA,nodeB)=>nodeA.distance-nodeB.distance);}function updateUnvisitedNeighbors(node,grid){const unvisitedNeighbors=getUnvisitedNeighbors(node,grid);for(const neighbor of unvisitedNeighbors){neighbor.distance=node.distance+1;neighbor.previousNode=node;}}function getUnvisitedNeighbors(node,grid){const neighbors=[];const{col,row}=node;if(row>0)neighbors.push(grid[row-1][col]);if(row<grid.length-1)neighbors.push(grid[row+1][col]);if(col>0)neighbors.push(grid[row][col-1]);if(col<grid[0].length-1)neighbors.push(grid[row][col+1]);return neighbors.filter(neighbor=>!neighbor.isVisited);}function getAllNodes(grid){const nodes=[];for(const row of grid){for(const node of row){nodes.push(node);}}return nodes;}// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode){const nodesInShortestPathOrder=[];let currentNode=finishNode;while(currentNode!==null){nodesInShortestPathOrder.unshift(currentNode);currentNode=currentNode.previousNode;}return nodesInShortestPathOrder;}","map":{"version":3,"names":["dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","row","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"sources":["C:/Users/conan/OneDrive/Desktop/Pathfinding-Visualizer/Pathfinding-Visualizer/src/algorithms/dijkstra.js"],"sourcesContent":["// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}